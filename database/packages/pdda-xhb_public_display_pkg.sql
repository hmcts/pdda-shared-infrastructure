SET client_encoding TO 'UTF8';

DROP SCHEMA IF EXISTS xhb_public_display_pkg CASCADE;
CREATE SCHEMA IF NOT EXISTS xhb_public_display_pkg;

-- function used to convert a String of comma-delimited numbers into
    -- an array, declared deterministic as it is probable that the passed
    -- in values will be similar/same each call
CREATE OR REPLACE FUNCTION xhb_public_display_pkg.convert_string (p_str_in VARCHAR) RETURNS bigint[] AS $body$
DECLARE

	l_bigint_array     bigint[] := '{}';
	l_text_array       text[];

BEGIN
	-- If the passed in parameter is null, then there are no values!
	IF (p_str_in IS NOT NULL) THEN
	
		-- Split the values in the string by commas and then convert to an array of bigint values
		l_text_array := regexp_split_to_array(p_str_in, ',');
		FOR var IN array_lower(l_text_array, 1)..array_upper(l_text_array, 1) LOOP
			l_bigint_array := array_append(l_bigint_array, ( TRIM( BOTH FROM var::text) )::bigint);
		END LOOP;
	END IF;
	RETURN l_bigint_array;
END;

$body$
LANGUAGE PLPGSQL
 IMMUTABLE;
-- REVOKE ALL ON FUNCTION xhb_public_display_pkg.convert_string (p_str_in VARCHAR) FROM PUBLIC;


CREATE OR REPLACE FUNCTION xhb_public_display_pkg.get_log_entry_rowid (p_scheduled_hearing_id_in bigint, p_defendant_on_case_id_in bigint) RETURNS integer AS $body$
DECLARE

	SHORT_ADJOURN CONSTANT bigint := 30100;
	LONG_ADJOURN  CONSTANT bigint := 30200;
	CASE_CLOSED   CONSTANT bigint := 30300;
	RESUME        CONSTANT bigint := 10500;

	l_first_rowid        integer;
	l_case_closed_rowid  integer;
	l_is_case_closed     boolean := FALSE;

	c1 CURSOR FOR
		SELECT row_number() OVER () AS row_num, row_id, event_type
		FROM (SELECT xcle.entry_id AS row_id, xcled.event_type
				FROM   PUBLIC.xhb_court_log_entry xcle,
					   PUBLIC.xhb_court_log_event_desc xcled
				WHERE  xcle.EVENT_DESC_ID = xcled.EVENT_DESC_ID
				AND    xcled.EVENT_TYPE(SHORT_ADJOURN, LONG_ADJOURN, CASE_CLOSED, RESUME)
				AND    xcle.scheduled_hearing_id = p_scheduled_hearing_id_in
				AND (xcle.defendant_on_case_id IS NULL OR xcle.defendant_on_case_id = p_defendant_on_case_id_in)
				ORDER BY DATE_TIME DESC) alias2;

BEGIN
	FOR rec IN c1 LOOP
		IF (rec.row_num = 1) THEN
			-- Resumes should be ignored at this point...
			IF (rec.event_type <> RESUME) THEN
				l_first_rowid := rec.row_id;
			END IF;
		END IF;

		IF (rec.event_type = LONG_ADJOURN) THEN
			IF (l_is_case_closed) THEN
				RETURN l_case_closed_rowid;
			END IF;
			RETURN rec.row_id;
		ELSIF (l_is_case_closed = FALSE AND rec.event_type = CASE_CLOSED) THEN
			l_is_case_closed    := TRUE;
			l_case_closed_rowid := rec.row_id;
		END IF;
	END LOOP;

	-- If no long adjourn events, then return the first entry...
	RETURN l_first_rowid;
END;

    -- This stored procedure is used to get the summary by name data
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON FUNCTION xhb_public_display_pkg.get_log_entry_rowid (p_scheduled_hearing_id_in bigint, p_defendant_on_case_id_in bigint) FROM PUBLIC;


CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_summary_by_name ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT
			COURT_SITE.COURT_SITE_NAME,
			COURT_SITE.SHORT_NAME,
			COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
			SITTING.IS_FLOATING AS IS_FLOATING,
			COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
			COURT_ROOM.CREST_COURT_ROOM_NO,
			MOVED_FROM_COURT_SITE.SHORT_NAME AS MOVED_FROM_CS_SHORT_NAME, --MOVED SITE
			MOVED_FROM_COURT_ROOM.DISPLAY_NAME AS MOVED_FROM_COURT_ROOM_NAME,
			COURT_ROOM.COURT_ROOM_ID AS COURT_ROOM_ID,
			MOVED_FROM_COURT_ROOM.COURT_ROOM_ID AS MOVED_FROM_COURT_ROOM_ID,
			SCHEDULED_HEARING.NOT_BEFORE_TIME AS NOT_BEFORE_TIME,
			LTRIM(DEFENDANT.FIRST_NAME) AS DEFENDANT_FIRST_NAME,
			LTRIM(DEFENDANT.MIDDLE_NAME) AS DEFENDANT_MIDDLE_NAME,
			LTRIM(DEFENDANT.SURNAME) AS DEFENDANT_SURNAME,
			DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID AS DEFENDANT_ON_CASE_ID,
			CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
			(CASE
			  WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
		FROM
			PUBLIC.xhb_hearing_list hearing_list,
			PUBLIC.xhb_sitting sitting, 
			PUBLIC.xhb_court_room court_room,
			PUBLIC.xhb_court_site court_site, 
			PUBLIC.xhb_scheduled_hearing scheduled_hearing
				LEFT OUTER JOIN PUBLIC.xhb_court_room moved_from_court_room ON (SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = MOVED_FROM_COURT_ROOM.COURT_ROOM_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_site moved_from_court_site ON (MOVED_FROM_COURT_ROOM.COURT_SITE_ID = MOVED_FROM_COURT_SITE.COURT_SITE_ID),
			PUBLIC.xhb_defendant defendant,
			PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant,
			PUBLIC.xhb_defendant_on_case defendant_on_case
				LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (DEFENDANT_ON_CASE.CASE_ID = CASE_REFERENCE.CASE_ID),
			(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase,
			UNNEST(xhb_public_display_pkg.convert_string(COURT_ROOM_IDS_IN)) tmp_court_room(COLUMN_VALUE)
		WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
		AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
		AND SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID 
		AND SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID 
		AND DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID 
		AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y') 
		AND HEARING_LIST.COURT_ID = COURT_ID_IN
		AND HEARING_LIST.START_DATE = START_DATE_IN
		AND SITTING.COURT_ROOM_ID = TMP_COURT_ROOM.COLUMN_VALUE 
		AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID 
		AND COURT_ROOM.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID
		AND SITTING.IS_FLOATING='0'  
		AND DEFENDANT_ON_CASE.CASE_ID = xhbcase.CASE_ID 
		ORDER BY
			DEFENDANT_SURNAME,
			DEFENDANT_FIRST_NAME,
			DEFENDANT_MIDDLE_NAME;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_summary_by_name ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) FROM PUBLIC;


-- This stored procedure is used to get the summary by name data
CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_summary_by_name_u ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT
			COURT_SITE.COURT_SITE_NAME,
			COURT_SITE.SHORT_NAME,
			COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
			SITTING.IS_FLOATING AS IS_FLOATING,
			COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
			COURT_ROOM.CREST_COURT_ROOM_NO,
			MOVED_FROM_COURT_ROOM.DISPLAY_NAME AS MOVED_FROM_COURT_ROOM_NAME,
			COURT_ROOM.COURT_ROOM_ID AS COURT_ROOM_ID,
			MOVED_FROM_COURT_SITE.SHORT_NAME AS MOVED_FROM_CS_SHORT_NAME, --MOVED SITE
			MOVED_FROM_COURT_ROOM.COURT_ROOM_ID AS MOVED_FROM_COURT_ROOM_ID,
			SCHEDULED_HEARING.NOT_BEFORE_TIME AS NOT_BEFORE_TIME,
			LTRIM(DEFENDANT.FIRST_NAME) AS DEFENDANT_FIRST_NAME,
			LTRIM(DEFENDANT.MIDDLE_NAME) AS DEFENDANT_MIDDLE_NAME,
			LTRIM(DEFENDANT.SURNAME) AS DEFENDANT_SURNAME,
			DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID AS DEFENDANT_ON_CASE_ID,
			CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
			(CASE
			  WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
		FROM
			UNNEST(xhb_public_display_pkg.convert_string(COURT_ROOM_IDS_IN)) tmp_court_room(COLUMN_VALUE),
			PUBLIC.xhb_sitting sitting, 
			PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant, 
			PUBLIC.xhb_hearing_list hearing_list, 
			PUBLIC.xhb_defendant defendant, 
			PUBLIC.xhb_court_site court_site, 
			PUBLIC.xhb_court_room court_room, 
			(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase, 
			PUBLIC.xhb_scheduled_hearing scheduled_hearing
				LEFT OUTER JOIN PUBLIC.xhb_court_room moved_from_court_room ON (SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = MOVED_FROM_COURT_ROOM.COURT_ROOM_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_site moved_from_court_site ON (MOVED_FROM_COURT_ROOM.COURT_SITE_ID = MOVED_FROM_COURT_SITE.COURT_SITE_ID),
			PUBLIC.xhb_defendant_on_case defendant_on_case
				LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (DEFENDANT_ON_CASE.CASE_ID = CASE_REFERENCE.CASE_ID)
		WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
		AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
		AND SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID 
		AND SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID 
		AND DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID 
		AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y') 
		AND HEARING_LIST.COURT_ID = COURT_ID_IN 
		AND HEARING_LIST.START_DATE = START_DATE_IN 
		AND SITTING.COURT_ROOM_ID = TMP_COURT_ROOM.COLUMN_VALUE 
		AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID
		AND COURT_ROOM.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID    --MOVED SITE
		AND DEFENDANT_ON_CASE.CASE_ID = xhbcase.CASE_ID 
		ORDER BY
			DEFENDANT_SURNAME,
			DEFENDANT_FIRST_NAME,
			DEFENDANT_MIDDLE_NAME;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_summary_by_name_u ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) FROM PUBLIC;


-- This stored procedure is used to get the jury current status and daily list WITHOUT unassigned cases
CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_jury_status_daily_list ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT
			COURT_SITE.COURT_SITE_NAME,
			COURT_SITE.SHORT_NAME,
			COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
			SITTING.IS_FLOATING AS IS_FLOATING,
			COURT_ROOM.CREST_COURT_ROOM_NO AS CREST_COURT_ROOM_NO,
			SITTING.SITTING_SEQUENCE_NO AS SITTING_SEQUENCE_NO,
			coalesce(SCHEDULED_HEARING.NOT_BEFORE_TIME, SCHEDULED_HEARING.ORIGINAL_TIME) AS SCHEDULED_HEARING_TIME_SORT,
			SCHEDULED_HEARING.SEQUENCE_NO AS SCHEDULED_HEARING_SEQUENCE_NO,
			COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
			MOVED_FROM_COURT_SITE.SHORT_NAME AS MOVED_FROM_CS_SHORT_NAME, --MOVED SITE
			MOVED_FROM_COURT_ROOM.DISPLAY_NAME AS MOVED_FROM_COURT_ROOM_NAME,
			TMP_COURT_ROOM.COLUMN_VALUE AS LIST_COURT_ROOM_ID,  -- What court room is currently being listed.
																-- Used to determine how the case has moved.
			COURT_ROOM.COURT_ROOM_ID AS COURT_ROOM_ID,
			MOVED_FROM_COURT_ROOM.COURT_ROOM_ID AS MOVED_FROM_COURT_ROOM_ID,
			REF_JUDGE.FULL_LIST_TITLE1 AS FULL_LIST_TITLE1,
			REF_JUDGE.SURNAME AS JUDGE_SURNAME,
			DEFENDANT.DEFENDANT_ID AS DEFENDANT_ID,
			DEFENDANT.FIRST_NAME AS DEFENDANT_FIRST_NAME,
			DEFENDANT.MIDDLE_NAME AS DEFENDANT_MIDDLE_NAME,
			DEFENDANT.SURNAME AS DEFENDANT_SURNAME,
			DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID AS DEFENDANT_ON_CASE_ID,
			xhbcase.CASE_TYPE || xhbcase.CASE_NUMBER AS CASE_NUMBER,
			xhbcase.CASE_TITLE AS CASE_TITLE,
			REF_HEARING_TYPE.HEARING_TYPE_DESC AS HEARING_DESCRIPTION,
			SCHEDULED_HEARING.NOT_BEFORE_TIME AS NOT_BEFORE_TIME,
			SCHEDULED_HEARING.HEARING_PROGRESS AS HEARING_PROGRESS,
			CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
			SCHEDULED_HEARING.SCHEDULED_HEARING_ID AS SCHEDULED_HEARING_ID,
			(CASE
			  WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
		FROM
			UNNEST(xhb_public_display_pkg.convert_string(COURT_ROOM_IDS_IN)) tmp_court_room(COLUMN_VALUE),
			PUBLIC.xhb_sitting sitting, 
			PUBLIC.xhb_ref_hearing_type ref_hearing_type, 
			PUBLIC.xhb_hearing_list hearing_list, 
			PUBLIC.xhb_hearing hearing, 
			PUBLIC.xhb_court_site court_site, 
			PUBLIC.xhb_court_room court_room, 
			PUBLIC.xhb_scheduled_hearing scheduled_hearing
				LEFT OUTER JOIN PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant ON (SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant_on_case defendant_on_case ON (SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant defendant ON (DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID)
				LEFT OUTER JOIN PUBLIC.xhb_ref_judge ref_judge ON (Xhb_Custom_Pkg.GET_REF_JUDGE_ID(SCHEDULED_HEARING.SCHEDULED_HEARING_ID) = REF_JUDGE.REF_JUDGE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_room moved_from_court_room ON (SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = MOVED_FROM_COURT_ROOM.COURT_ROOM_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_site moved_from_court_site ON (MOVED_FROM_COURT_ROOM.COURT_SITE_ID = MOVED_FROM_COURT_SITE.COURT_SITE_ID),
			(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase
				LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (xhbcase.CASE_ID = CASE_REFERENCE.CASE_ID)
		WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
		AND SITTING.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID 
		AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
		AND SCHEDULED_HEARING.HEARING_ID = HEARING.HEARING_ID 
		AND HEARING.REF_HEARING_TYPE_ID = REF_HEARING_TYPE.REF_HEARING_TYPE_ID 
		AND HEARING.CASE_ID = xhbcase.CASE_ID   
		AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y')    
		AND HEARING_LIST.COURT_ID = COURT_ID_IN 
		AND HEARING_LIST.START_DATE = START_DATE_IN
		AND SITTING.COURT_ROOM_ID = TMP_COURT_ROOM.COLUMN_VALUE 
		AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID    --MOVED SITE
		AND SITTING.IS_FLOATING = '0'
		ORDER BY COURT_SITE_CODE,
			IS_FLOATING,
			COURT_ROOM.CREST_COURT_ROOM_NO,
			SITTING_SEQUENCE_NO,
			coalesce(SCHEDULED_HEARING.NOT_BEFORE_TIME, SCHEDULED_HEARING.ORIGINAL_TIME),
			SCHEDULED_HEARING.SEQUENCE_NO;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_jury_status_daily_list ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) FROM PUBLIC;


-- This stored procedure is used to get the jury current status and daily list WITH unassigned cases
CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_jury_status_daily_list_u ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT
			COURT_SITE.COURT_SITE_NAME,
			COURT_SITE.SHORT_NAME,
			COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
			SITTING.IS_FLOATING AS IS_FLOATING,
			COURT_ROOM.CREST_COURT_ROOM_NO AS CREST_COURT_ROOM_NO,
			SITTING.SITTING_SEQUENCE_NO AS SITTING_SEQUENCE_NO,
			coalesce(SCHEDULED_HEARING.NOT_BEFORE_TIME, SCHEDULED_HEARING.ORIGINAL_TIME) AS SCHEDULED_HEARING_TIME_SORT,
			SCHEDULED_HEARING.SEQUENCE_NO AS SCHEDULED_HEARING_SEQUENCE_NO,
			COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
			MOVED_FROM_COURT_SITE.SHORT_NAME AS MOVED_FROM_CS_SHORT_NAME, --MOVED SITE
			MOVED_FROM_COURT_ROOM.DISPLAY_NAME AS MOVED_FROM_COURT_ROOM_NAME,
			COURT_ROOM.COURT_ROOM_ID AS COURT_ROOM_ID,
			TMP_COURT_ROOM.COLUMN_VALUE AS LIST_COURT_ROOM_ID,  -- What court room is currently being listed.
																-- Used to determine how the case has moved.
			MOVED_FROM_COURT_ROOM.COURT_ROOM_ID AS MOVED_FROM_COURT_ROOM_ID,
			REF_JUDGE.FULL_LIST_TITLE1 AS FULL_LIST_TITLE1,
			REF_JUDGE.SURNAME AS JUDGE_SURNAME,
			DEFENDANT.DEFENDANT_ID AS DEFENDANT_ID,
			DEFENDANT.FIRST_NAME AS DEFENDANT_FIRST_NAME,
			DEFENDANT.MIDDLE_NAME AS DEFENDANT_MIDDLE_NAME,
			DEFENDANT.SURNAME AS DEFENDANT_SURNAME,
			DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID AS DEFENDANT_ON_CASE_ID,
			xhbcase.CASE_TYPE || xhbcase.CASE_NUMBER AS CASE_NUMBER,
			xhbcase.CASE_TITLE AS CASE_TITLE,
			REF_HEARING_TYPE.HEARING_TYPE_DESC AS HEARING_DESCRIPTION,
			SCHEDULED_HEARING.NOT_BEFORE_TIME AS NOT_BEFORE_TIME,
			SCHEDULED_HEARING.HEARING_PROGRESS AS HEARING_PROGRESS,
			CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
			SCHEDULED_HEARING.SCHEDULED_HEARING_ID AS SCHEDULED_HEARING_ID,
			(CASE
			  WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
		FROM
			UNNEST(xhb_public_display_pkg.convert_string(COURT_ROOM_IDS_IN)) tmp_court_room(COLUMN_VALUE),
			PUBLIC.xhb_sitting sitting, 
			PUBLIC.xhb_ref_hearing_type ref_hearing_type, 
			PUBLIC.xhb_hearing_list hearing_list, 
			PUBLIC.xhb_hearing hearing, 
			PUBLIC.xhb_court_site court_site, 
			PUBLIC.xhb_court_room court_room, 
			PUBLIC.xhb_scheduled_hearing scheduled_hearing
				LEFT OUTER JOIN PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant ON (SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant_on_case defendant_on_case ON (SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant defendant ON (DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID)
				LEFT OUTER JOIN PUBLIC.xhb_ref_judge ref_judge ON (Xhb_Custom_Pkg.GET_REF_JUDGE_ID(SCHEDULED_HEARING.SCHEDULED_HEARING_ID) = REF_JUDGE.REF_JUDGE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_room moved_from_court_room ON (SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = MOVED_FROM_COURT_ROOM.COURT_ROOM_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_site moved_from_court_site ON (MOVED_FROM_COURT_ROOM.COURT_SITE_ID = MOVED_FROM_COURT_SITE.COURT_SITE_ID), 
			(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase
				LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (xhbcase.CASE_ID = CASE_REFERENCE.CASE_ID)
		WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
		AND SITTING.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID 
		AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
		AND SCHEDULED_HEARING.HEARING_ID = HEARING.HEARING_ID 
		AND HEARING.REF_HEARING_TYPE_ID = REF_HEARING_TYPE.REF_HEARING_TYPE_ID 
		AND HEARING.CASE_ID = xhbcase.CASE_ID    
		AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y')   
		AND HEARING_LIST.COURT_ID = COURT_ID_IN 
		AND HEARING_LIST.START_DATE = START_DATE_IN 
		AND SITTING.COURT_ROOM_ID = TMP_COURT_ROOM.COLUMN_VALUE 
		AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID    --MOVED SITE
		AND SITTING.IS_FLOATING = '0'
		UNION
		SELECT
			COURT_SITE.COURT_SITE_NAME,
			COURT_SITE.SHORT_NAME,
			COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
			SITTING.IS_FLOATING AS IS_FLOATING,
			COURT_ROOM.CREST_COURT_ROOM_NO AS CREST_COURT_ROOM_NO,
			SITTING.SITTING_SEQUENCE_NO AS SITTING_SEQUENCE_NO,
			coalesce(SCHEDULED_HEARING.NOT_BEFORE_TIME, SCHEDULED_HEARING.ORIGINAL_TIME) AS SCHEDULED_HEARING_TIME_SORT,
			SCHEDULED_HEARING.SEQUENCE_NO AS SCHEDULED_HEARING_SEQUENCE_NO,
			COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
			MOVED_FROM_COURT_SITE.SHORT_NAME AS MOVED_FROM_CS_SHORT_NAME, --MOVED SITE
			MOVED_FROM_COURT_ROOM.DISPLAY_NAME AS MOVED_FROM_COURT_ROOM_NAME,
			COURT_ROOM.COURT_ROOM_ID AS LIST_COURT_ROOM_ID,  -- What court room is currently being listed.
																-- Used to determine how the case has moved.
			COURT_ROOM.COURT_ROOM_ID AS COURT_ROOM_ID,
			MOVED_FROM_COURT_ROOM.COURT_ROOM_ID AS MOVED_FROM_COURT_ROOM_ID,
			REF_JUDGE.FULL_LIST_TITLE1 AS FULL_LIST_TITLE1,
			REF_JUDGE.SURNAME AS JUDGE_SURNAME,
			DEFENDANT.DEFENDANT_ID AS DEFENDANT_ID,
			DEFENDANT.FIRST_NAME AS DEFENDANT_FIRST_NAME,
			DEFENDANT.MIDDLE_NAME AS DEFENDANT_MIDDLE_NAME,
			DEFENDANT.SURNAME AS DEFENDANT_SURNAME,
			DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID AS DEFENDANT_ON_CASE_ID,
			xhbcase.CASE_TYPE || xhbcase.CASE_NUMBER AS CASE_NUMBER,
			xhbcase.CASE_TITLE AS CASE_TITLE,
			REF_HEARING_TYPE.HEARING_TYPE_DESC AS HEARING_DESCRIPTION,
			SCHEDULED_HEARING.NOT_BEFORE_TIME AS NOT_BEFORE_TIME,
			SCHEDULED_HEARING.HEARING_PROGRESS AS HEARING_PROGRESS,
			CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
			SCHEDULED_HEARING.SCHEDULED_HEARING_ID AS SCHEDULED_HEARING_ID,
			(CASE
			  WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
		FROM 
			PUBLIC.xhb_sitting sitting, 
			PUBLIC.xhb_ref_hearing_type ref_hearing_type, 
			PUBLIC.xhb_hearing_list hearing_list, 
			PUBLIC.xhb_hearing hearing, 
			PUBLIC.xhb_court_site court_site, 
			PUBLIC.xhb_court_room court_room, 
			PUBLIC.xhb_scheduled_hearing scheduled_hearing
				LEFT OUTER JOIN PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant ON (SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant_on_case defendant_on_case ON (SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant defendant ON (DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID)
				LEFT OUTER JOIN PUBLIC.xhb_ref_judge ref_judge ON (Xhb_Custom_Pkg.GET_REF_JUDGE_ID(SCHEDULED_HEARING.SCHEDULED_HEARING_ID) = REF_JUDGE.REF_JUDGE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_room moved_from_court_room ON (SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = MOVED_FROM_COURT_ROOM.COURT_ROOM_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_site moved_from_court_site ON (MOVED_FROM_COURT_ROOM.COURT_SITE_ID = MOVED_FROM_COURT_SITE.COURT_SITE_ID), 
			(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase
				LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (xhbcase.CASE_ID = CASE_REFERENCE.CASE_ID)
		WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
		AND SITTING.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID 
		AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
		AND SCHEDULED_HEARING.HEARING_ID = HEARING.HEARING_ID 
		AND HEARING.REF_HEARING_TYPE_ID = REF_HEARING_TYPE.REF_HEARING_TYPE_ID 
		AND HEARING.CASE_ID = xhbcase.CASE_ID
		AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y')   
		AND HEARING_LIST.COURT_ID = COURT_ID_IN 
		AND HEARING_LIST.START_DATE = START_DATE_IN 
		AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID    --MOVED SITE
		AND SITTING.IS_FLOATING = '1'
		ORDER BY COURT_SITE_CODE,
			IS_FLOATING,
			CREST_COURT_ROOM_NO,
			SITTING_SEQUENCE_NO,
			SCHEDULED_HEARING_TIME_SORT,
			SCHEDULED_HEARING_SEQUENCE_NO;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_jury_status_daily_list_u ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) FROM PUBLIC;


-- This stored procedure is used to get the court list
CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_court_list ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT
			COURT_SITE.COURT_SITE_NAME,
			COURT_SITE.SHORT_NAME,
			COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
			COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
			COURT_ROOM.CREST_COURT_ROOM_NO,
			MOVED_FROM_COURT_ROOM.DISPLAY_NAME AS MOVED_FROM_COURT_ROOM_NAME,
			TMP_COURT_ROOM.COLUMN_VALUE AS LIST_COURT_ROOM_ID,  -- What court room is currently being listed.
																-- Used to determine how the case has moved.
			COURT_ROOM.COURT_ROOM_ID AS COURT_ROOM_ID,
			MOVED_FROM_COURT_SITE.SHORT_NAME AS MOVED_FROM_CS_SHORT_NAME, --MOVED SITE
			MOVED_FROM_COURT_ROOM.COURT_ROOM_ID AS MOVED_FROM_COURT_ROOM_ID,
			DEFENDANT.DEFENDANT_ID AS DEFENDANT_ID,
			DEFENDANT.FIRST_NAME AS DEFENDANT_FIRST_NAME,
			DEFENDANT.MIDDLE_NAME AS DEFENDANT_MIDDLE_NAME,
			DEFENDANT.SURNAME AS DEFENDANT_SURNAME,
			DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID AS DEFENDANT_ON_CASE_ID,
			xhbcase.CASE_TYPE || xhbcase.CASE_NUMBER AS CASE_NUMBER,
			xhbcase.CASE_TITLE AS CASE_TITLE,
			REF_HEARING_TYPE.HEARING_TYPE_DESC AS HEARING_DESCRIPTION,
			SCHEDULED_HEARING.NOT_BEFORE_TIME AS NOT_BEFORE_TIME,
			SCHEDULED_HEARING.HEARING_PROGRESS AS HEARING_PROGRESS,
			CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
			SCHEDULED_HEARING.SCHEDULED_HEARING_ID AS SCHEDULED_HEARING_ID,
			(CASE
			  WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
		FROM 
			UNNEST(xhb_public_display_pkg.convert_string(COURT_ROOM_IDS_IN)) tmp_court_room(COLUMN_VALUE), 
			PUBLIC.xhb_sitting sitting, 
			PUBLIC.xhb_ref_hearing_type ref_hearing_type, 
			PUBLIC.xhb_hearing_list hearing_list, 
			PUBLIC.xhb_hearing hearing, 
			PUBLIC.xhb_court_site court_site, 
			PUBLIC.xhb_court_room court_room, 
			PUBLIC.xhb_scheduled_hearing scheduled_hearing
				LEFT OUTER JOIN PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant ON (SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant_on_case defendant_on_case ON (SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant defendant ON (DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID)
				LEFT OUTER JOIN PUBLIC.xhb_ref_judge ref_judge ON (Xhb_Custom_Pkg.GET_REF_JUDGE_ID(SCHEDULED_HEARING.SCHEDULED_HEARING_ID) = REF_JUDGE.REF_JUDGE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_room moved_from_court_room ON (SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = MOVED_FROM_COURT_ROOM.COURT_ROOM_ID)
				LEFT OUTER JOIN PUBLIC.xhb_court_site moved_from_court_site ON (MOVED_FROM_COURT_ROOM.COURT_SITE_ID = MOVED_FROM_COURT_SITE.COURT_SITE_ID), 
			(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase
				LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (xhbcase.CASE_ID = CASE_REFERENCE.CASE_ID)
		WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
		AND SITTING.IS_FLOATING = '0' 
		AND SITTING.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID 
		AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
		AND SCHEDULED_HEARING.HEARING_ID = HEARING.HEARING_ID 
		AND HEARING.REF_HEARING_TYPE_ID = REF_HEARING_TYPE.REF_HEARING_TYPE_ID 
		AND HEARING.CASE_ID = xhbcase.CASE_ID    
		AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y')   
		AND HEARING_LIST.COURT_ID = COURT_ID_IN 
		AND HEARING_LIST.START_DATE = START_DATE_IN 
		AND (SITTING.COURT_ROOM_ID = TMP_COURT_ROOM.COLUMN_VALUE
						OR SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = TMP_COURT_ROOM.COLUMN_VALUE) 
		AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID 
		AND COURT_ROOM.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID    --MOVED SITE
		ORDER BY COURT_SITE_CODE,
			IS_FLOATING,
			COURT_ROOM.CREST_COURT_ROOM_NO,
			SITTING_SEQUENCE_NO,
			coalesce(SCHEDULED_HEARING.NOT_BEFORE_TIME, SCHEDULED_HEARING.ORIGINAL_TIME),
			SCHEDULED_HEARING.SEQUENCE_NO;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_court_list ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) FROM PUBLIC;


-- This stored procedure is used to get the all court status
CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_all_court_status ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT cs.court_site_name
			  ,cs.short_name
			  ,cs.court_site_code
			  ,cr.display_name court_room_name
			  ,cr.crest_court_room_no
			  ,v.defendant_id
			  ,v.defendant_first_name
			  ,v.defendant_middle_name
			  ,v.defendant_surname
			  ,v.defendant_on_case_id
			  ,v.case_number
			  ,v.case_title case_title
			  ,crls.status AS PUBLIC_DISPLAY_STATUS
			  ,crls.time_status_set AS TIME_STATUS_SET
			  ,v.reporting_restrictions
			  ,v.hide_in_public_display
		FROM 
			PUBLIC.xhb_court_site cs, 
			PUBLIC.xhb_court_room cr, 
			UNNEST(xhb_public_display_pkg.convert_string(COURT_ROOM_IDS_IN)) tmp_court_room(COLUMN_VALUE)
				LEFT OUTER JOIN PUBLIC.xhb_cr_live_display crls ON (TMP_COURT_ROOM.COLUMN_VALUE = crls.court_room_id)
				LEFT OUTER JOIN (
					SELECT 
						d.defendant_id AS defendant_id,
						D.FIRST_NAME AS DEFENDANT_FIRST_NAME,
						D.MIDDLE_NAME AS DEFENDANT_MIDDLE_NAME,
						D.SURNAME AS DEFENDANT_SURNAME,
						doc.defendant_on_case_id AS DEFENDANT_ON_CASE_ID,
						C.CASE_TYPE || C.CASE_NUMBER AS CASE_NUMBER,
						C.CASE_TITLE AS CASE_TITLE,
						cr.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
						sh.scheduled_hearing_id,
						(case
							when doc.public_display_hide = 'Y' then 'Y'
							when d.public_display_hide = 'Y' then 'Y'
							else null end) hide_in_public_display
					FROM 
						PUBLIC.xhb_sitting s, 
						PUBLIC.xhb_hearing_list hl, 
						PUBLIC.xhb_hearing h, 
						PUBLIC.xhb_scheduled_hearing sh
							LEFT OUTER JOIN PUBLIC.xhb_sched_hearing_defendant shd ON (sh.scheduled_hearing_id = shd.scheduled_hearing_id)
							LEFT OUTER JOIN PUBLIC.xhb_defendant_on_case doc ON (shd.defendant_on_case_id = doc.defendant_on_case_id)
							LEFT OUTER JOIN PUBLIC.xhb_defendant d ON (doc.defendant_id = d.defendant_id),
						(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') c
							LEFT OUTER JOIN PUBLIC.xhb_case_reference cr ON (c.case_id = cr.case_id)
					WHERE hl.court_id = COURT_ID_IN 
					AND hl.start_date = START_DATE_IN 
					AND hl.list_id = s.list_id 
					AND s.sitting_id = sh.sitting_id 
					AND sh.is_case_active = 'Y' 
					AND sh.hearing_id = h.hearing_id 
					AND h.case_id = c.case_id     
					AND (doc.obs_ind IS NULL OR doc.obs_ind <> 'Y') ) v ON (crls.scheduled_hearing_id = v.scheduled_hearing_id)
		WHERE cs.court_id = COURT_ID_IN 
		AND cs.court_site_id = cr.court_site_id 
		AND cr.court_room_id = TMP_COURT_ROOM.COLUMN_VALUE   
		ORDER BY COURT_SITE_CODE
				,CREST_COURT_ROOM_NO
				,DEFENDANT_SURNAME;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_all_court_status ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) FROM PUBLIC;

-- TEST FROM HERE!!!!!!!!!!!!!!!!!!!

-- This stored procedure is used to get the COURT DETAIL
CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_court_detail ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_ID_IN PUBLIC.xhb_court_room.COURT_ROOM_ID%TYPE) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT
			COURT_SITE.COURT_SITE_NAME,
			COURT_SITE.SHORT_NAME,
			COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
			COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
			COURT_ROOM.CREST_COURT_ROOM_NO,
			REF_JUDGE.FULL_LIST_TITLE1 AS FULL_LIST_TITLE1,
			REF_JUDGE.SURNAME AS JUDGE_SURNAME,
			DEFENDANT.DEFENDANT_ID AS DEFENDANT_ID,
			DEFENDANT.FIRST_NAME AS DEFENDANT_FIRST_NAME,
			DEFENDANT.MIDDLE_NAME AS DEFENDANT_MIDDLE_NAME,
			DEFENDANT.SURNAME AS DEFENDANT_SURNAME,
			DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID AS DEFENDANT_ON_CASE_ID,
			xhbcase.CASE_TYPE || xhbcase.CASE_NUMBER AS CASE_NUMBER,
			xhbcase.CASE_TITLE AS CASE_TITLE,
			REF_HEARING_TYPE.HEARING_TYPE_DESC AS HEARING_DESCRIPTION,
			CR_LIVE_DISPLAY.STATUS AS PUBLIC_DISPLAY_STATUS,
			CR_LIVE_DISPLAY.TIME_STATUS_SET AS TIME_STATUS_SET,
			CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
			(CASE
			  WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
			  ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
		FROM 
			PUBLIC.xhb_sitting sitting, 
			PUBLIC.xhb_ref_hearing_type ref_hearing_type, 
			PUBLIC.xhb_hearing_list hearing_list, 
			PUBLIC.xhb_hearing hearing, 
			PUBLIC.xhb_court_site court_site, 
			PUBLIC.xhb_court_room court_room, 
			PUBLIC.xhb_scheduled_hearing scheduled_hearing
				LEFT OUTER JOIN PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant ON (SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant_on_case defendant_on_case ON (SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID)
				LEFT OUTER JOIN PUBLIC.xhb_defendant defendant ON (DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID)
				LEFT OUTER JOIN PUBLIC.xhb_cr_live_display cr_live_display ON (SCHEDULED_HEARING.SCHEDULED_HEARING_ID = CR_LIVE_DISPLAY.SCHEDULED_HEARING_ID)
				LEFT OUTER JOIN PUBLIC.xhb_ref_judge ref_judge ON (Xhb_Custom_Pkg.GET_REF_JUDGE_ID(SCHEDULED_HEARING.SCHEDULED_HEARING_ID) = REF_JUDGE.REF_JUDGE_ID), 
			(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase
				LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (xhbcase.CASE_ID = CASE_REFERENCE.CASE_ID)
		WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
		AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID 
		AND COURT_ROOM.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID 
		AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
		AND SCHEDULED_HEARING.HEARING_ID = HEARING.HEARING_ID 
		AND HEARING.REF_HEARING_TYPE_ID = REF_HEARING_TYPE.REF_HEARING_TYPE_ID 
		AND HEARING.CASE_ID = xhbcase.CASE_ID    
		AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y')   
		AND SCHEDULED_HEARING.IS_CASE_ACTIVE = 'Y' 
		AND HEARING_LIST.COURT_ID = COURT_ID_IN 
		AND HEARING_LIST.START_DATE = START_DATE_IN 
		AND SITTING.COURT_ROOM_ID = COURT_ROOM_ID_IN;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_court_detail ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_ID_IN PUBLIC.xhb_court_room.COURT_ROOM_ID%TYPE) FROM PUBLIC;


-- This stored procedure is used to get the public notices for a court room
CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_public_notices ( RESULTS_OUT INOUT REFCURSOR, COURT_ROOM_ID_IN PUBLIC.xhb_court_room.COURT_ROOM_ID%TYPE) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT 
			PUBLIC_NOTICE.PUBLIC_NOTICE_DESC AS PUBLIC_NOTICE_DESC,
			CONFIGURED_PUBLIC_NOTICE.IS_ACTIVE AS IS_ACTIVE,
			DEFINITIVE_PUBLIC_NOTICE.PRIORITY AS PRIORITY
		FROM 
			PUBLIC.XHB_PUBLIC_NOTICE PUBLIC_NOTICE,
			PUBLIC.XHB_CONFIGURED_PUBLIC_NOTICE CONFIGURED_PUBLIC_NOTICE,
			PUBLIC.XHB_DEFINITIVE_PUBLIC_NOTICE DEFINITIVE_PUBLIC_NOTICE
		WHERE PUBLIC_NOTICE.PUBLIC_NOTICE_ID = CONFIGURED_PUBLIC_NOTICE.PUBLIC_NOTICE_ID
		AND DEFINITIVE_PUBLIC_NOTICE.DEFINITIVE_PN_ID = PUBLIC_NOTICE.DEFINITIVE_PN_ID
		AND CONFIGURED_PUBLIC_NOTICE.IS_ACTIVE = '1'
		AND CONFIGURED_PUBLIC_NOTICE.COURT_ROOM_ID = COURT_ROOM_ID_IN
		ORDER BY DEFINITIVE_PUBLIC_NOTICE.PRIORITY LIMIT 5;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_public_notices ( RESULTS_OUT INOUT REFCURSOR, COURT_ROOM_ID_IN PUBLIC.xhb_court_room.COURT_ROOM_ID%TYPE) FROM PUBLIC;


-- This stored procedure is to get all active cases in a court room except for the
-- one passed in. Used to identify active cases to turn off
CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_active_cases_in_room ( RESULTS_OUT INOUT REFCURSOR, LIST_ID_IN PUBLIC.xhb_hearing_list.LIST_ID%TYPE, COURT_ROOM_ID_IN PUBLIC.xhb_court_room.COURT_ROOM_ID%TYPE, SCHEDULED_HEARING_ID_IN PUBLIC.xhb_scheduled_hearing.SCHEDULED_HEARING_ID%TYPE) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT  SH.SCHEDULED_HEARING_ID AS SCHEDULED_HEARING_ID
		FROM    PUBLIC.xhb_scheduled_hearing SH, PUBLIC.xhb_sitting S
		WHERE   SH.IS_CASE_ACTIVE='Y'
		AND S.SITTING_ID = SH.SITTING_ID
		AND S.LIST_ID = LIST_ID_IN
		AND S.COURT_ROOM_ID = COURT_ROOM_ID_IN
		AND SH.SCHEDULED_HEARING_ID != SCHEDULED_HEARING_ID_IN;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_active_cases_in_room ( RESULTS_OUT INOUT REFCURSOR, LIST_ID_IN PUBLIC.xhb_hearing_list.LIST_ID%TYPE, COURT_ROOM_ID_IN PUBLIC.xhb_court_room.COURT_ROOM_ID%TYPE, SCHEDULED_HEARING_ID_IN PUBLIC.xhb_scheduled_hearing.SCHEDULED_HEARING_ID%TYPE) FROM PUBLIC;


CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_all_case_status ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT main_query.*,
			COURT_LOG_ENTRY.log_entry_xml AS COURT_LOG_ENTRY,
			COURT_LOG_ENTRY.date_time     AS COURT_LOG_ENTRY_TIME,
			coalesce(trim(both (CASE WHEN DEFENDANT_SURNAME IS NOT NULL THEN DEFENDANT_SURNAME || ',' ELSE NULL END)
				|| (CASE WHEN DEFENDANT_FIRST_NAME IS NOT NULL THEN ' ' || DEFENDANT_FIRST_NAME ELSE NULL END)
				|| (CASE WHEN DEFENDANT_MIDDLE_NAME IS NOT NULL THEN ' ' || DEFENDANT_MIDDLE_NAME ELSE NULL END)), CASE_TITLE) AS ORDER_NAME
		FROM 
			(SELECT COURT_SITE.COURT_SITE_NAME,
				COURT_SITE.SHORT_NAME,
				COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
				SITTING.IS_FLOATING AS IS_FLOATING,
				COURT_ROOM.CREST_COURT_ROOM_NO AS CREST_COURT_ROOM_NO,
				SITTING.SITTING_SEQUENCE_NO AS SITTING_SEQUENCE_NO,
				coalesce(SCHEDULED_HEARING.NOT_BEFORE_TIME, SCHEDULED_HEARING.ORIGINAL_TIME) AS SCHEDULED_HEARING_TIME_SORT,
				SCHEDULED_HEARING.SEQUENCE_NO AS SCHEDULED_HEARING_SEQUENCE_NO,
				COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
				MOVED_FROM_COURT_SITE.SHORT_NAME AS MOVED_FROM_CS_SHORT_NAME, --MOVED SITE
				MOVED_FROM_COURT_ROOM.DISPLAY_NAME AS MOVED_FROM_COURT_ROOM_NAME,
				TMP_COURT_ROOM.COLUMN_VALUE AS LIST_COURT_ROOM_ID,  -- What court room is currently being listed.
																	-- Used to determine how the case has moved.
				COURT_ROOM.COURT_ROOM_ID AS COURT_ROOM_ID,
				MOVED_FROM_COURT_ROOM.COURT_ROOM_ID AS MOVED_FROM_COURT_ROOM_ID,
				DEFENDANT.DEFENDANT_ID AS DEFENDANT_ID,
				DEFENDANT.FIRST_NAME AS DEFENDANT_FIRST_NAME,
				DEFENDANT.MIDDLE_NAME AS DEFENDANT_MIDDLE_NAME,
				DEFENDANT.SURNAME AS DEFENDANT_SURNAME,
				xhbcase.CASE_TYPE || xhbcase.CASE_NUMBER AS CASE_NUMBER,
				xhbcase.CASE_TITLE AS CASE_TITLE,
				REF_HEARING_TYPE.HEARING_TYPE_DESC AS HEARING_DESCRIPTION,
				SCHEDULED_HEARING.NOT_BEFORE_TIME AS NOT_BEFORE_TIME,
				SCHEDULED_HEARING.HEARING_PROGRESS AS HEARING_PROGRESS,
				CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
				SCHEDULED_HEARING.SCHEDULED_HEARING_ID AS SCHEDULED_HEARING_ID,
				DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID,
				(CASE
					WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
					WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
					ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
			FROM 
				UNNEST(xhb_public_display_pkg.convert_string(COURT_ROOM_IDS_IN)) tmp_court_room(COLUMN_VALUE), 
				PUBLIC.xhb_sitting sitting, 
				PUBLIC.xhb_ref_hearing_type ref_hearing_type, 
				PUBLIC.xhb_hearing_list hearing_list, 
				PUBLIC.xhb_hearing hearing, 
				PUBLIC.xhb_court_site court_site, 
				PUBLIC.xhb_court_room court_room, 
				PUBLIC.xhb_scheduled_hearing scheduled_hearing
					LEFT OUTER JOIN PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant ON (SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID)
					LEFT OUTER JOIN PUBLIC.xhb_defendant_on_case defendant_on_case ON (SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID)
					LEFT OUTER JOIN PUBLIC.xhb_defendant defendant ON (DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID)
					LEFT OUTER JOIN PUBLIC.xhb_court_room moved_from_court_room ON (SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = MOVED_FROM_COURT_ROOM.COURT_ROOM_ID)
					LEFT OUTER JOIN PUBLIC.xhb_court_site moved_from_court_site ON (MOVED_FROM_COURT_ROOM.COURT_SITE_ID = MOVED_FROM_COURT_SITE.COURT_SITE_ID),
				(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase
					LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (xhbcase.CASE_ID = CASE_REFERENCE.CASE_ID)
			WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
			AND SITTING.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID 
			AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
			AND SCHEDULED_HEARING.HEARING_ID = HEARING.HEARING_ID 
			AND HEARING.REF_HEARING_TYPE_ID = REF_HEARING_TYPE.REF_HEARING_TYPE_ID 
			AND HEARING.CASE_ID = xhbcase.CASE_ID    
			AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y')
			AND HEARING_LIST.COURT_ID = COURT_ID_IN 
			AND HEARING_LIST.START_DATE = START_DATE_IN 
			AND SITTING.COURT_ROOM_ID = TMP_COURT_ROOM.COLUMN_VALUE 
			AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID    --MOVED SITE
			AND SITTING.IS_FLOATING = '0') main_query 
				LEFT OUTER JOIN PUBLIC.xhb_court_log_entry court_log_entry ON (xhb_public_display_pkg.get_log_entry_rowid(main_query.scheduled_hearing_id, main_query.defendant_on_case_id) = COURT_LOG_ENTRY.entry_id)
				LEFT OUTER JOIN PUBLIC.xhb_court_log_event_desc court_log_event_desc ON (COURT_LOG_ENTRY.EVENT_DESC_ID = COURT_LOG_EVENT_DESC.EVENT_DESC_ID) 
		ORDER BY COURT_SITE_CODE,
			IS_FLOATING,
			CREST_COURT_ROOM_NO,
			SITTING_SEQUENCE_NO,
			SCHEDULED_HEARING_TIME_SORT,
			SCHEDULED_HEARING_SEQUENCE_NO,
			ORDER_NAME;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_all_case_status ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) FROM PUBLIC;


CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_all_case_status_u ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
		SELECT main_query.*,
			COURT_LOG_ENTRY.log_entry_xml AS COURT_LOG_ENTRY,
			COURT_LOG_ENTRY.date_time     AS COURT_LOG_ENTRY_TIME,
			coalesce(trim(both (CASE WHEN DEFENDANT_SURNAME IS NOT NULL THEN DEFENDANT_SURNAME || ',' ELSE NULL END)
				|| (CASE WHEN DEFENDANT_FIRST_NAME IS NOT NULL THEN ' ' || DEFENDANT_FIRST_NAME ELSE NULL END)
				|| (CASE WHEN DEFENDANT_MIDDLE_NAME IS NOT NULL THEN ' ' || DEFENDANT_MIDDLE_NAME ELSE NULL END)), CASE_TITLE) AS ORDER_NAME
		FROM 
			(SELECT COURT_SITE.COURT_SITE_NAME,
				COURT_SITE.SHORT_NAME,
				COURT_SITE.COURT_SITE_CODE AS COURT_SITE_CODE,
				SITTING.IS_FLOATING AS IS_FLOATING,
				COURT_ROOM.CREST_COURT_ROOM_NO AS CREST_COURT_ROOM_NO,
				SITTING.SITTING_SEQUENCE_NO AS SITTING_SEQUENCE_NO,
				coalesce(SCHEDULED_HEARING.NOT_BEFORE_TIME, SCHEDULED_HEARING.ORIGINAL_TIME) AS SCHEDULED_HEARING_TIME_SORT,
				SCHEDULED_HEARING.SEQUENCE_NO AS SCHEDULED_HEARING_SEQUENCE_NO,
				COURT_ROOM.DISPLAY_NAME AS COURT_ROOM_NAME,
				MOVED_FROM_COURT_ROOM.DISPLAY_NAME AS MOVED_FROM_COURT_ROOM_NAME,
				MOVED_FROM_COURT_SITE.SHORT_NAME AS MOVED_FROM_CS_SHORT_NAME, --MOVED SITE
				TMP_COURT_ROOM.COLUMN_VALUE AS LIST_COURT_ROOM_ID,  -- What court room is currently being listed.
																	-- Used to determine how the case has moved.
				COURT_ROOM.COURT_ROOM_ID AS COURT_ROOM_ID,
				MOVED_FROM_COURT_ROOM.COURT_ROOM_ID AS MOVED_FROM_COURT_ROOM_ID,
				DEFENDANT.DEFENDANT_ID AS DEFENDANT_ID,
				DEFENDANT.FIRST_NAME AS DEFENDANT_FIRST_NAME,
				DEFENDANT.MIDDLE_NAME AS DEFENDANT_MIDDLE_NAME,
				DEFENDANT.SURNAME AS DEFENDANT_SURNAME,
				xhbcase.CASE_TYPE || xhbcase.CASE_NUMBER AS CASE_NUMBER,
				xhbcase.CASE_TITLE AS CASE_TITLE,
				REF_HEARING_TYPE.HEARING_TYPE_DESC AS HEARING_DESCRIPTION,
				SCHEDULED_HEARING.NOT_BEFORE_TIME AS NOT_BEFORE_TIME,
				SCHEDULED_HEARING.HEARING_PROGRESS AS HEARING_PROGRESS,
				CASE_REFERENCE.REPORTING_RESTRICTIONS AS REPORTING_RESTRICTIONS,
				SCHEDULED_HEARING.SCHEDULED_HEARING_ID AS SCHEDULED_HEARING_ID,
				DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID,
				(CASE
				  WHEN DEFENDANT_ON_CASE.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
				  WHEN DEFENDANT.PUBLIC_DISPLAY_HIDE = 'Y' THEN 'Y'
				  ELSE NULL END) HIDE_IN_PUBLIC_DISPLAY
			FROM 
				UNNEST(xhb_public_display_pkg.convert_string(COURT_ROOM_IDS_IN)) tmp_court_room(COLUMN_VALUE), 
				PUBLIC.xhb_sitting sitting, 
				PUBLIC.xhb_ref_hearing_type ref_hearing_type, 
				PUBLIC.xhb_hearing_list hearing_list, 
				PUBLIC.xhb_hearing hearing, 
				PUBLIC.xhb_court_site court_site, 
				PUBLIC.xhb_court_room court_room, 
				PUBLIC.xhb_scheduled_hearing scheduled_hearing 
					LEFT OUTER JOIN PUBLIC.xhb_sched_hearing_defendant sched_hearing_defendant ON (SCHEDULED_HEARING.SCHEDULED_HEARING_ID = SCHED_HEARING_DEFENDANT.SCHEDULED_HEARING_ID)
					LEFT OUTER JOIN PUBLIC.xhb_defendant_on_case defendant_on_case ON (SCHED_HEARING_DEFENDANT.DEFENDANT_ON_CASE_ID = DEFENDANT_ON_CASE.DEFENDANT_ON_CASE_ID)
					LEFT OUTER JOIN PUBLIC.xhb_defendant defendant ON (DEFENDANT_ON_CASE.DEFENDANT_ID = DEFENDANT.DEFENDANT_ID)
					LEFT OUTER JOIN PUBLIC.xhb_court_room moved_from_court_room ON (SCHEDULED_HEARING.MOVED_FROM_COURT_ROOM_ID = MOVED_FROM_COURT_ROOM.COURT_ROOM_ID)
					LEFT OUTER JOIN PUBLIC.xhb_court_site moved_from_court_site ON (MOVED_FROM_COURT_ROOM.COURT_SITE_ID = MOVED_FROM_COURT_SITE.COURT_SITE_ID),
				(SELECT * FROM PUBLIC.xhb_case WHERE coalesce(PUBLIC_DISPLAY_HIDE,'N') <> 'Y') xhbcase
					LEFT OUTER JOIN PUBLIC.xhb_case_reference case_reference ON (xhbcase.CASE_ID = CASE_REFERENCE.CASE_ID)
			WHERE HEARING_LIST.LIST_ID = SITTING.LIST_ID 
			AND SITTING.COURT_SITE_ID = COURT_SITE.COURT_SITE_ID 
			AND SCHEDULED_HEARING.SITTING_ID = SITTING.SITTING_ID 
			AND SCHEDULED_HEARING.HEARING_ID = HEARING.HEARING_ID 
			AND HEARING.REF_HEARING_TYPE_ID = REF_HEARING_TYPE.REF_HEARING_TYPE_ID 
			AND HEARING.CASE_ID = xhbcase.CASE_ID    
			AND (DEFENDANT_ON_CASE.OBS_IND IS NULL OR DEFENDANT_ON_CASE.OBS_IND <> 'Y') 
			AND HEARING_LIST.COURT_ID = COURT_ID_IN 
			AND HEARING_LIST.START_DATE = START_DATE_IN 
			AND SITTING.COURT_ROOM_ID = TMP_COURT_ROOM.COLUMN_VALUE 
			AND SITTING.COURT_ROOM_ID = COURT_ROOM.COURT_ROOM_ID) main_query
				LEFT OUTER JOIN PUBLIC.xhb_court_log_entry court_log_entry ON (xhb_public_display_pkg.get_log_entry_rowid(main_query.scheduled_hearing_id, main_query.defendant_on_case_id) = COURT_LOG_ENTRY.entry_id)
				LEFT OUTER JOIN PUBLIC.xhb_court_log_event_desc court_log_event_desc ON (COURT_LOG_ENTRY.EVENT_DESC_ID = COURT_LOG_EVENT_DESC.EVENT_DESC_ID) 
		ORDER BY COURT_SITE_CODE,
			IS_FLOATING,
			CREST_COURT_ROOM_NO,
			SITTING_SEQUENCE_NO,
			SCHEDULED_HEARING_TIME_SORT,
			SCHEDULED_HEARING_SEQUENCE_NO,
			ORDER_NAME;
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_all_case_status_u ( RESULTS_OUT INOUT REFCURSOR, COURT_ID_IN PUBLIC.xhb_hearing_list.court_id%TYPE, START_DATE_IN PUBLIC.xhb_hearing_list.start_date%TYPE, COURT_ROOM_IDS_IN text) FROM PUBLIC;


CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_vip_display_docs_for_site ( RESULTS_OUT INOUT REFCURSOR, COURT_SITE_ID_IN PUBLIC.xhb_court_site.court_site_id%TYPE) AS $body$
BEGIN
	OPEN RESULTS_OUT FOR
	SELECT
		xdd.description_code,
		xdd.multiple_court_yn,
		xdd.LANGUAGE,
		xdd.country
	FROM
		PUBLIC.XHB_DISPLAY_LOCATION xdl,
		PUBLIC.XHB_DISPLAY xd,
		PUBLIC.XHB_ROTATION_SET_DD xrsdd,
		PUBLIC.XHB_DISPLAY_DOCUMENT xdd
	WHERE xdl.court_site_id = COURT_SITE_ID_IN
	AND xdl.description_code = 'v_i_p'
	AND xd.display_location_id = xdl.display_location_id
	AND xrsdd.rotation_set_id = xd.rotation_set_id
	AND xdd.display_document_id = xrsdd.display_document_id
	ORDER BY xdd.description_code;

END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_vip_display_docs_for_site ( RESULTS_OUT INOUT REFCURSOR, COURT_SITE_ID_IN PUBLIC.xhb_court_site.court_site_id%TYPE) FROM PUBLIC;


CREATE OR REPLACE PROCEDURE xhb_public_display_pkg.get_vip_court_rooms_for_site ( RESULTS_OUT INOUT REFCURSOR, COURT_SITE_ID_IN PUBLIC.xhb_court_site.court_site_id%TYPE) AS $body$
BEGIN
    OPEN RESULTS_OUT FOR
        SELECT
            xcr.court_room_id,
            xcs.short_name,
            xcr.display_name,
            xd.show_unassigned_yn
        FROM
            PUBLIC.XHB_DISPLAY_LOCATION xdl,
            PUBLIC.XHB_DISPLAY xd,
            PUBLIC.XHB_DISPLAY_COURT_ROOM xdcr,
            PUBLIC.xhb_court_room xcr,
            PUBLIC.xhb_court_site xcs
        WHERE xdl.court_site_id = COURT_SITE_ID_IN
        AND xdl.description_code = 'v_i_p'
        AND xd.display_location_id = xdl.display_location_id
        AND xdcr.display_id = xd.display_id
        AND xcr.court_room_id = xdcr.court_room_id
        AND xcs.court_site_id = xcr.court_site_id
        ORDER BY
            xcs.short_name,
            xcr.crest_court_room_no;
			
END;

$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON PROCEDURE xhb_public_display_pkg.get_vip_court_rooms_for_site ( RESULTS_OUT INOUT REFCURSOR, COURT_SITE_ID_IN PUBLIC.xhb_court_site.court_site_id%TYPE) FROM PUBLIC;
-- End of Oracle package 'xhb_public_display_pkg' declaration
