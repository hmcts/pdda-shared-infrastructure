/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
	id 'application'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.springframework.boot' version '3.1.8'
	id 'com.github.ben-manes.versions' version '0.47.0'
	id 'org.owasp.dependencycheck' version '8.4.0'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'checkstyle'
    id 'pmd'
    id 'jacoco'

}


group = 'uk.gov.hmcts'
version = '1.0'
description = 'PDDA'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
    
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}



tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}


tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
    events "standardOut", "started", "passed", "skipped", "failed"
  }
}

test {
  failFast = true
}


// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}



// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle",
    "compileOnly",
    "pmd"
  ]
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.12.7'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "pdda"
    property "sonar.projectKey", "pdda-sonarqube"
  }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://jitpack.io')
    }
}

ext {
  log4JVersion = "2.20.0"
}

ext['snakeyaml.version'] = '2.0'


dependencies {
    implementation 'org.springframework:spring-expression:6.0.16'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.1.8'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.8'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper:10.1.19'
    implementation 'org.springframework.boot:spring-boot-starter-activemq:3.1.8'
    implementation 'org.apache.activemq:activemq-broker:5.18.3'
    implementation 'org.apache.activemq:activemq-kahadb-store:5.18.3'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.javassist:javassist:3.21.0-GA'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.openjpa:openjpa-persistence-jdbc:3.2.2'
    implementation 'org.codehaus.castor:castor-codegen:1.4.1'
    implementation 'xalan:serializer:2.7.3'
    implementation 'org.jboss.spec.javax.rmi:jboss-rmi-api_1.0_spec:1.0.2.Final'
    implementation 'org.springframework:spring-core:6.0.16'
    implementation 'org.springframework:spring-beans:6.0.16'
    implementation 'org.springframework:spring-context:6.0.16'
    implementation 'org.springframework.data:spring-data-commons:3.1.8'
    implementation 'org.springframework.data:spring-data-jpa:3.1.8'
    implementation 'org.springframework:spring-tx:6.0.16'
    implementation 'org.springframework:spring-web:6.0.16'
    implementation 'com.jcraft:jsch:0.1.55'
    implementation 'org.apache.commons:commons-vfs2:2.9.0'
    implementation 'commons-configuration:commons-configuration:1.10'
    implementation 'org.postgresql:postgresql:42.5.1'
    implementation 'net.bytebuddy:byte-buddy:1.14.1'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
    implementation 'jakarta.el:jakarta.el-api:5.0.1'
    implementation 'org.apache.activemq:activemq-spring:5.18.3'
    implementation 'org.apache.tomee:openejb-core:9.1.2', {
      exclude group: "org.apache.geronimo.mail", module: "geronimo-mail_2.1_provider"
      exclude group: "org.apache.geronimo.components", module: "geronimo-connector"
    }
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.apache.hadoop:hadoop-hdfs-client:3.3.6'
    implementation 'org.hsqldb:hsqldb:2.7.2'
    implementation 'org.yaml:snakeyaml:2.2'
    implementation group: 'org.apache.tomee', name: 'jakartaee-api', version: '10.0-M2', {
      exclude group: "org.apache.geronimo.mail", module: "geronimo-mail_2.1_provider"
      exclude group: "org.apache.geronimo.components", module: "geronimo-connector"
    }
    implementation 'ch.qos.logback:logback-core:1.4.14'
    implementation 'ch.qos.logback:logback-classic:1.4.14'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    implementation 'jakarta.jms:jakarta.jms-api:3.1.0'
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:10.1.18'
    implementation 'com.squareup.okio:okio:3.7.0'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.easymock:easymock:5.0.0'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
    compileOnly 'org.springframework.boot:spring-boot-starter-tomcat:3.1.8'
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    compileOnly 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.0'
}


mainClassName = 'uk.gov.hmcts.PddaSpringbootApplication'

bootJar {
  archiveFileName = "PDDA-1.0.war"

  manifest {
    attributes('Implementation-Version': project.version.toString()) 
  }
}

// Needed to stop eclipse showing errors on org.w3c.dom / org.xml.sax imports
configurations {
   all*.exclude group: 'xml-apis', module: 'xml-apis'
 }
